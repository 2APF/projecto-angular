Como vou usar um servidor json, criei, dentro da massa backend ... rodando o comando "npm init -y", depois rodei ainda dentro da massa
backend, o comando "npm i json-serve", em seguida criei o db.json onde colocar a minha tabela:
"{
 "produtos": [{
            "id": 1,
 "Nome": "Nokia C3",
 "preço": 10000
        },
        {
            "id": 2,
 "Nome": "Caderno Spacial",
 "preço": 4500
        }
    ]
}"

Depois botei no script "script" de teste do pacote arquivo e colocado "start": "json-server -watch db.json --port 3001"... em seguida rodei npm start (e rodei a api)

Instalei o Angular (--mínimo) dentro da massa crud .
Dentro de Angular.json em src, mudei para nao inline a mensma pagina junto o html e css
Instalei o material "ng adicionar @angular/material"

criar um novo componente com o codigo "ng gerar componente <form>", por exemplo, primeiro criei o cabeçalho, entaoo ocamando foi "g gerar componentes componentes/templete/hearder"

Depois importei o tubar do material, tem varios componentes e para eu usar, tenho de importar dentro do app.module "
importar { MatToolbarModule } de '@angular/material/barra de ferramentas';" e colocar nos importações (MatToolbarModule).

Importei tambem:
porta { MatSidenavModule } de '@angular/material/sidenav';
importação { MatListModule } de '@angular/material/lista';

NOTA: Dentro do arquivo ts, temos os decoreitors (que comeca com o @ em seguidda componente),
e, o aquivo referenciado pelo seletor passa um componente ser um

1. Componentes: e formado por 3 partes (html, ts e css)... pode tambem juntar em uma unica pagina (ts).

2.Directivas: existem dois tipos de diretivas, de atributos (funcao de alterar a aparencia e o componente de um elemento ou outra directiva e viuncular com o 
backend )... e diectiva estrutural (alteração layout adicionando e removendo elementos da DOM) @Directive
Atributo: @Directive
Estrutural: <forme *ngIf="produto"... ></formulário> - uma condicional //
<li *ngFor="let produto de produtos">{{ product.name }}</li>



############################## dIRECTIVAS ##########################

2.Directivas: existem dois tipos de diretivas, de atributos (funcao de alterar a aparencia e o componente de um elemento ou outra directiva e viuncular com o 
backend )... e diectiva estrutural (alteração layout adicionando e removendo elementos da DOM) @Directive
Atributo: @Directive
Estrutural: <forme *ngIf="produto"... ></formulário> - uma condicional //
<li *ngFor="let produto de produtos">{{ product.name }}</li>

Comando para criar: ng g d <pasta>/directiva
Ex: ng g d c directives/red

######################################################################




############################## #############################

Puxar uma variavel (um array) - Vinculação de propriedades
TS: produtos: Produtos[];
HTML: [dataSource]="produtos];


Ligar um evento - Vinculação de Eventos
TS: criarProduct(): vazio {}
HTML: (clique)="criarproduto()";



Pegar um atibuto para o html - One Way Data Binding
TS: nome: string = "Artur";
HTML: <input [valor]="nome">


Pegar um atibuto e, se alterar nenhuma entrada, automaticamente alterar tambem o atributo -- Vinculação de Dados bidirem
TS: nome: string = "Artur";
HTML: <input [(valor)]="nome">
######################################################################


########################## Rota Angular ##############################
Tem que fazer mapeamento de componentes.
Quando o usuario seleciona um elemento, e a url e selecionada a pagina rota Outlet e Puxa.

EX:
HTML: <a roteadorLink="/produtos"></a>

TS: rotas de const: Rota = [{
 caminho: "produtos"
 componente: ProductCrudComponent
}];

ARQUIVO HTML: ...

        <router-outlet></router-outlet>
######################################################################



######################## Tubos angulares ##############################
| = Tubulação
Processamentos que faz-se em cima de variaveis... interpola interpreta uma varivel (|), geralmente e usado para formatar.
Ex: {{ product.criated | data }}
Ex: {{ product.price | moeda: 'BRL' }}
Ex: {{ produto.criado | data: 'fullDate | maiúscula }} - Cadeia de tubos, encadeiamentoo tcheny

Trocar vigula por ponto, dados formatar, moeda, etc.
######################################################################



########################## Programacao Reativa ##############################
O Angula utiliza ReactiveX - Programacao reativa. Rxjs.

Um codigo proativo acaba ocupando o processador ao carregar checando se tem informacao;
Ja o reactivo 

Padrao mais usado na web e o Observer{
 padrao orientado um evento
 Então tem um Programacao reativando apartir do padrao observar
}

callback - passar uma funcao como parametro em outro funcao
callback>promises>observáveis (reusavel, stream dados, operadores);

Quando trabalha com observáveis, retornos, promisses, automaticamente estas a trabalho 
com codigo assincrono (nao resposta imediata na chamada do codigo)
######################################################################




######################### Serviços ###################################

São classes que tem como objeivo organizar e compartilhar metodos
 e dados entre componentes.

 Parte nao visual.
 pode compartilhar dados entre componentes

 Comando para criar serviço:"ng gerar serviços/poduct"

 @Injectable: quer dizer que vai ser interpretada no angula e pode ser
 gambá ser injectada em outras classes.
 fornecidoIn: Injector... injecao de dependencias
 Quer dizer que essa classe e injectada   

 Os serviços > são singletons, criar apenas uma instancia.

 2 Tipos de Injector {
 MóduloInjetor => @NgModule e @Injectable
     ElementoInjector => @Directive e @component
 }

######################################################################

